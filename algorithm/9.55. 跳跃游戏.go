package algorithm

/*
给你一个非负整数数组 nums ，你最初位于数组的 第一个下标 。数组中的每个元素代表你在该位置可以跳跃的最大长度。
判断你是否能够到达最后一个下标，如果可以，返回 true ；否则，返回 false 。
示例 1：
输入：nums = [2,3,1,1,4]
输出：true
解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。
示例 2：

输入：nums = [3,2,1,0,4]
输出：false
解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标
*/

/*
解题思路: 一直往下走，走到底，如果走到底后，累积步数大于数组长度 则可以走到头 否则 走不到头
*/

func canJump(nums []int) bool {
	// 定义一个累积步数 每能走一步+1 并且加上当前所在位置的索引的可用步数 更新累积可用最大步数
	var total int
	l := len(nums)
	for i := 0; i < l; i++ {
		// 如果走完了 步数不满足/或者走的过程中 也不能进行一步移动
		if i > total {
			return false
		}
		// 当前阶段累积可用步数
		temp := i + nums[i]
		// 更新最大可用步数
		total = max(total, temp)
	}
	return true
}
